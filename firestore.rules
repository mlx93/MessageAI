rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }
    
    // Users by phone index (for uniqueness) 
    match /usersByPhone/{phone} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // Conversations
    match /conversations/{conversationId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow delete: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow update: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
      
      // Typing indicators subcollection
      match /typing/{userId} {
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        allow write: if isAuthenticated() && request.auth.uid == userId;
      }
    }
    
    // Active conversations (for smart notifications)
    match /activeConversations/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // User contacts subcollection
    match /users/{userId}/contacts/{contactId} {
      allow read, write: if isOwner(userId);
    }
    
    // Phone verification codes
    // Allow read for OTP auto-fetch (verificationId acts as secure token)
    // Only Cloud Functions can write
    match /verifications/{verificationId} {
      allow read: if true; // Anyone with verificationId can read (needed for OTP auto-fetch)
      allow write: if false; // Only Cloud Functions can write
    }
    
    // AI-generated action items
    match /action_items/{itemId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants;
      allow update: if isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants;
      allow create, delete: if false; // Only Cloud Functions can create/delete
    }
    
    // AI-generated decisions
    match /decisions/{decisionId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants;
      allow update: if isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants;
      allow create, delete: if false; // Only Cloud Functions can create/delete
    }
    
    // AI proactive suggestions
    match /proactive_suggestions/{suggestionId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants);
      allow update: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants);
      allow create, delete: if false; // Only Cloud Functions can create/delete
    }
    
    // AI cache (for caching AI responses)
    match /ai_cache/{cacheId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Messages collection (top-level for AI features to access)
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(resource.data.conversationId)).data.participants;
      allow write: if false; // Only Cloud Functions can write top-level messages
    }
  }
}

